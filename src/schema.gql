# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Booking {
  createdAt: DateTime!
  event: Event!
  eventId: ID!
  id: ID!
  numberOfTickets: Int!
  updatedAt: DateTime!
  user: User!
  userId: ID!
}

input BookingFilterInput {
  createdFrom: DateTime
  createdTo: DateTime
  eventId: ID
  userId: ID
}

input CreateBookingInput {
  eventId: ID!
  numberOfTickets: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  availableTickets: Int!
  bookings: [Booking!]
  createdAt: DateTime!
  date: DateTime!
  description: String
  id: ID!
  location: String!
  price: Float!
  title: String!
  totalTickets: Int!
  updatedAt: DateTime!
}

type Mutation {
  createBooking(input: CreateBookingInput!, userId: ID!): Booking!
}

type PaginatedBookingsResponse {
  items: [Booking!]!
  limit: Int!
  page: Int!
  total: Int!
}

type PaginatedEventsResponse {
  items: [Event!]!
  limit: Int!
  page: Int!
  total: Int!
}

type PaginatedUsersResponse {
  items: [User!]!
  limit: Int!
  page: Int!
  total: Int!
}

input PaginationInput {
  limit: Int
  page: Int
}

type Query {
  """Get a single booking by ID"""
  booking(id: ID!): Booking!

  """Get all bookings with optional filtering and pagination"""
  bookings(filter: BookingFilterInput, pagination: PaginationInput): PaginatedBookingsResponse!

  """Get a single event by ID"""
  event(
    """Event unique identifier"""
    id: ID!
  ): Event!

  """Get paginated list of events"""
  events(
    """Pagination options"""
    pagination: PaginationInput
  ): PaginatedEventsResponse!

  """Get popular events"""
  popularEvents(
    """Number of events to return"""
    limit: Int
  ): [Event!]!

  """Get upcoming events"""
  upcomingEvents(
    """Number of events to return"""
    limit: Int
  ): [Event!]!

  """Get a single user by ID"""
  user(id: ID!): User!

  """Get all users with optional filtering and pagination"""
  users(filter: UserFilterInput, pagination: PaginationInput): PaginatedUsersResponse!
}

type User {
  bookings: [Booking!]
  createdAt: DateTime!
  email: String!
  id: ID!
  updatedAt: DateTime!
  username: String!
}

input UserFilterInput {
  email: String
  username: String
}